[{"/Users/viktoriakapinus/Documents/ToDoList/src/index.tsx":"1","/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx":"2","/Users/viktoriakapinus/Documents/ToDoList/src/Todolist.tsx":"3","/Users/viktoriakapinus/Documents/ToDoList/src/serviceWorker.ts":"4","/Users/viktoriakapinus/Documents/ToDoList/src/Components/Input.tsx":"5","/Users/viktoriakapinus/Documents/ToDoList/src/Components/EditableSpan.tsx":"6","/Users/viktoriakapinus/Documents/Localstorage/src/index.tsx":"7","/Users/viktoriakapinus/Documents/Localstorage/src/serviceWorker.ts":"8","/Users/viktoriakapinus/Documents/Localstorage/src/App.tsx":"9","/Users/viktoriakapinus/Documents/Localstorage/src/LocalStorage.tsx":"10"},{"size":544,"mtime":1676025420412,"results":"11","hashOfConfig":"12"},{"size":4386,"mtime":1675415587257,"results":"13","hashOfConfig":"12"},{"size":2921,"mtime":1675415587100,"results":"14","hashOfConfig":"12"},{"size":5295,"mtime":1587586614000,"results":"15","hashOfConfig":"12"},{"size":1063,"mtime":1675354127229,"results":"16","hashOfConfig":"12"},{"size":579,"mtime":1675361574698,"results":"17","hashOfConfig":"12"},{"size":544,"mtime":1676025420412,"results":"18","hashOfConfig":"19"},{"size":5295,"mtime":1587586614000,"results":"20","hashOfConfig":"19"},{"size":1298,"mtime":1676038083433,"results":"21","hashOfConfig":"19"},{"size":252,"mtime":1676036178327,"results":"22","hashOfConfig":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ni66nl",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bfq0el",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/viktoriakapinus/Documents/ToDoList/src/index.tsx",[],[],"/Users/viktoriakapinus/Documents/ToDoList/src/App.tsx",["56"],[],"import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskTypeArray, Todolist} from \"./Todolist\";\r\nimport {v1} from 'uuid'\r\nimport {Input} from \"./Components/Input\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\ntype TodoListsType = {\r\n    id:string;\r\n    title:string;\r\n    filter:FilterValuesType;\r\n\r\n\r\n}\r\n\r\ntype Tasks = {\r\n    [key:string]:Array<TaskTypeArray>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todoListsID1=v1()\r\n    let todoListsID2=v1()\r\n\r\n    let [todoLists, SetTodoLists] = useState<TodoListsType[]>([\r\n        {id: todoListsID1, title: \"Whats to learn\", filter: \"all\"},\r\n        {id: todoListsID2, title: \"Whats to buy\", filter: \"all\"},\r\n\r\n    ])\r\n\r\n\r\n    let [tasks, setTasks] = useState<Tasks>({\r\n        [todoListsID1]:[\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todoListsID2]:[\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n    ]\r\n    });\r\n\r\n\r\n\r\n\r\n      const FilterTask = (todolistId:string,nameButton:FilterValuesType)=> {\r\n        SetTodoLists(todoLists.map((el)=>el.id===todolistId ? {...el,filter:nameButton} :el))\r\n       }\r\n\r\n\r\n\r\n       const removeTask=(todolistId:string,taskId:string)=>{\r\n\r\n        // setTask(tasks.filter((el)=>el.id!==taskId))\r\n           setTasks({...tasks,[todolistId]:tasks[todolistId].filter((el)=>el.id!==taskId)})\r\n       }\r\n\r\n       const  changeStatus=(todolistId:string,id:string,e:boolean)=>{\r\n      // setTask(tasks.map((el)=>el.id===id ? {...el,isDone: isDone}: el))\r\nsetTasks({...tasks,[todolistId]:tasks[todolistId].map((el)=>el.id===id ? {...el,isDone: e}:el)})\r\n\r\n       }\r\n\r\n       const addMessage=(todolistId:string,valueInput:string)=>{\r\n        let newTask= { id: v1(), title: valueInput, isDone: true }\r\n        //    setTask([newTask,...tasks])\r\n           setTasks({...tasks,[todolistId]:[newTask,...tasks[todolistId]]})\r\n       }\r\n\r\n       const deleteTodolist = (todolistId:string)=> {\r\n\r\n          SetTodoLists(todoLists.filter((el)=>el.id!==todolistId))\r\n       }\r\n\r\n       const AddTodolist = (valueInput:string)=> {\r\n           let todoListsID3=v1()\r\n\r\n           let newTask:TodoListsType= { id: todoListsID3, title: valueInput, filter: 'all' }\r\n          SetTodoLists([newTask,...todoLists])\r\n           setTasks({...tasks,[todoListsID3]:[]})\r\n\r\n       }\r\n\r\n       const changeSpanTask=(todolistId:string,id:string,e:string)=>{\r\n\r\n          setTasks({...tasks,[todolistId]:tasks[todolistId].map((el)=>el.id===id ? {...el,title:e }:el)})\r\n       }\r\n\r\n    const changeSpanTodolist=(todolistId:string,e:string)=>{\r\n\r\n          SetTodoLists(todoLists.map((el)=>el.id===todolistId ? {...el,title:e}:el))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Input addMessage={AddTodolist}/>\r\n\r\n            {todoLists.map((el)=>{\r\n                const FilteredTask = ()=> {\r\n                    let newArrayTask=tasks[el.id]\r\n                    if (el.filter==='active'){newArrayTask=tasks[el.id].filter((el)=>el.isDone===false)}\r\n                    if (el.filter==='completed'){newArrayTask=tasks[el.id].filter((el)=>el.isDone===true)}\r\n                    return newArrayTask\r\n                }\r\n                return (\r\n                    <Todolist\r\n                        key={el.id}\r\n                        id={el.id}\r\n                        title={el.title}\r\n                        task={FilteredTask()}\r\n                        FilterTask={FilterTask}\r\n                        removeTask={removeTask}\r\n                        changeStatus={changeStatus}\r\n                        addMessage={addMessage}\r\n                        filter={el.filter}\r\n                        deleteTodolist={deleteTodolist}\r\n                        changeSpanTask={changeSpanTask}\r\n                        changeSpanTodolist={changeSpanTodolist}\r\n                    />\r\n                )\r\n            })}\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","/Users/viktoriakapinus/Documents/ToDoList/src/Todolist.tsx",[],[],"/Users/viktoriakapinus/Documents/ToDoList/src/serviceWorker.ts",[],[],[],"/Users/viktoriakapinus/Documents/ToDoList/src/Components/Input.tsx",[],[],"/Users/viktoriakapinus/Documents/ToDoList/src/Components/EditableSpan.tsx",["57"],[],"import React, { useState} from 'react';\n\n\ntype EditableSpan = {\n    title:string\n    ChangeSpan:(e:string)=>void\n}\n\nexport const EditableSpan:React.FC<EditableSpan> = ({title,ChangeSpan,...props}) => {\n\n\n    let [edit,SetEdit]=useState(true)\n\n    const EditMode = ()=> {\n      SetEdit(!edit)\n\n    }\n\n    const changeSpan = (e:string)=> {\n        ChangeSpan(e)\n    }\n\n    return (\n\n\n   edit ?  <span onDoubleClick={(m)=>EditMode()}>\n            {title}</span> :    <input onBlur={EditMode} value={title} autoFocus onChange={(e)=>changeSpan(e.currentTarget.value)}/>\n\n\n\n    );\n};\n\n","/Users/viktoriakapinus/Documents/Localstorage/src/index.tsx",[],[],"/Users/viktoriakapinus/Documents/Localstorage/src/serviceWorker.ts",[],[],"/Users/viktoriakapinus/Documents/Localstorage/src/App.tsx",[],[],"/Users/viktoriakapinus/Documents/Localstorage/src/LocalStorage.tsx",[],[],{"ruleId":"58","severity":1,"message":"59","line":6,"column":9,"nodeType":"60","messageId":"61","endLine":6,"endColumn":21},{"ruleId":"62","severity":1,"message":"63","line":9,"column":14,"nodeType":"60","messageId":"64","endLine":9,"endColumn":49},"@typescript-eslint/no-unused-vars","'EditableSpan' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-redeclare","'EditableSpan' is already defined.","redeclared"]